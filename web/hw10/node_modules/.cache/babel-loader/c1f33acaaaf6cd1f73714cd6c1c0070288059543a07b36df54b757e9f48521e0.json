{"ast":null,"code":"import Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nexport default {\n  name: 'App',\n  components: {\n    Footer,\n    Middle,\n    Header\n  },\n  data: function () {\n    return this.$root.$data;\n  },\n  beforeCreate() {\n    this.$root.$on(\"onEnter\", (login, password) => {\n      if (password === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n        return;\n      }\n      const users = Object.values(this.users).filter(u => u.login === login);\n      if (users.length === 0) {\n        this.$root.$emit(\"onEnterValidationError\", \"No such user\");\n      } else {\n        this.userId = users[0].id;\n        this.$root.$emit(\"onChangePage\", \"Index\");\n      }\n    });\n    this.$root.$on(\"onLogout\", () => this.userId = null);\n    this.$root.$on(\"onWritePost\", (title, text) => {\n      if (this.userId) {\n        if (!title || title.length < 5) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Title is too short\");\n        } else if (!text || text.length < 10) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Text is too short\");\n        } else {\n          const id = Math.max(...Object.keys(this.posts)) + 1;\n          this.$root.$set(this.posts, id, {\n            id,\n            title,\n            text,\n            userId: this.userId\n          });\n        }\n      } else {\n        this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n      }\n    });\n    this.$root.$on(\"onEditPost\", (id, text) => {\n      if (this.userId) {\n        if (!id) {\n          this.$root.$emit(\"onEditPostValidationError\", \"ID is invalid\");\n        } else if (!text || text.length < 10) {\n          this.$root.$emit(\"onEditPostValidationError\", \"Text is too short\");\n        } else {\n          let posts = Object.values(this.posts).filter(p => p.id === parseInt(id));\n          if (posts.length) {\n            posts.forEach(item => {\n              item.text = text;\n            });\n          } else {\n            this.$root.$emit(\"onEditPostValidationError\", \"No such post\");\n          }\n        }\n      } else {\n        this.$root.$emit(\"onEditPostValidationError\", \"No access\");\n      }\n    });\n  }\n};","map":{"version":3,"mappings":"AASA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;EACA;EACAC;IACA;MACA;QACA;QACA;MACA;MAEA;MACA;QACA;MACA;QACA;QACA;MACA;IACA;IAEA;IAEA;MACA;QACA;UACA;QACA;UACA;QACA;UACA;UACA;YACAC;YAAAC;YAAAC;YAAAC;UACA;QACA;MACA;QACA;MACA;IACA;IAEA;MACA;QACA;UACA;QACA;UACA;QACA;UACA;UACA;YACAC;cACAC;YACA;UACA;YACA;UACA;QACA;MACA;QACA;MACA;IACA;EACA;AACA","names":["name","components","Footer","Middle","Header","data","beforeCreate","id","title","text","userId","posts","item"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n    <div id=\"app\">\n        <Header :userId=\"userId\" :users=\"users\"/>\n        <Middle :posts=\"posts\"/>\n        <Footer :numberPosts=\"Object.values(posts).length\" :numberUsers=\"Object.values(users).length\"/>\n    </div>\n</template>\n\n<script>\nimport Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\n\nexport default {\n    name: 'App',\n    components: {\n        Footer,\n        Middle,\n        Header\n    },\n    data: function () {\n        return this.$root.$data;\n    },\n    beforeCreate() {\n        this.$root.$on(\"onEnter\", (login, password) => {\n            if (password === \"\") {\n                this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n                return;\n            }\n\n            const users = Object.values(this.users).filter(u => u.login === login);\n            if (users.length === 0) {\n                this.$root.$emit(\"onEnterValidationError\", \"No such user\");\n            } else {\n                this.userId = users[0].id;\n                this.$root.$emit(\"onChangePage\", \"Index\");\n            }\n        });\n\n        this.$root.$on(\"onLogout\", () => this.userId = null);\n\n        this.$root.$on(\"onWritePost\", (title, text) => {\n            if (this.userId) {\n                if (!title || title.length < 5) {\n                    this.$root.$emit(\"onWritePostValidationError\", \"Title is too short\");\n                } else if (!text || text.length < 10) {\n                    this.$root.$emit(\"onWritePostValidationError\", \"Text is too short\");\n                } else {\n                    const id = Math.max(...Object.keys(this.posts)) + 1;\n                    this.$root.$set(this.posts, id, {\n                        id, title, text, userId: this.userId\n                    });\n                }\n            } else {\n                this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n            }\n        });\n\n        this.$root.$on(\"onEditPost\", (id, text) => {\n            if (this.userId) {\n                if (!id) {\n                    this.$root.$emit(\"onEditPostValidationError\", \"ID is invalid\");\n                } else if (!text || text.length < 10) {\n                    this.$root.$emit(\"onEditPostValidationError\", \"Text is too short\");\n                } else {\n                    let posts = Object.values(this.posts).filter(p => p.id === parseInt(id));\n                    if (posts.length) {\n                        posts.forEach((item) => {\n                            item.text = text;\n                        });\n                    } else {\n                        this.$root.$emit(\"onEditPostValidationError\", \"No such post\");\n                    }\n                }\n            } else {\n                this.$root.$emit(\"onEditPostValidationError\", \"No access\");\n            }\n        });\n    }\n}\n</script>\n\n<style>\n#app {\n\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}